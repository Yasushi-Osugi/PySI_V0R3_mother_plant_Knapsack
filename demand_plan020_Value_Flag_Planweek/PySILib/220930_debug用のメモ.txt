# debug用のメモ
def set_leaf_PSI_DB( year, node ):

# 処理手順を記述する。

# I-P-Oの定義

        # *****
        # LEAFの時、leaf_nodeを処理
        # *****

# INPTUT process
        i_PlanSpace, i_LotSpace, plan_env = input_Y(year, node, isleaf)

# MAINT process
        fin_lot_space_Y = main_process(i_PlanSpace, i_LotSpace, plan_env)

# OUTPTUT process
        output_Y(year, node,  i_PlanSpace,i_LotSpace,  fin_lot_space_Y)



# INPTUT process  => PSI_DBからyear+nodeで検索し、PSI_dataリストを生成、
# 0. def input_Y(year, node,isleaf):  の中で初期設定し、クラスのインスタンス生

# 1. def set_leaf_PSI_DB()で、 
#    "PSI_DB.csv"を読込み、
#    検索をかけ、df[ (df['year'] == year) & (df['node_to'] == node) ]
#    リスト化 PSI_DB_data = df_psi.values.tolist()
# *******************************************************::
PSI_DB_data [[0, 2023, 'prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '1S', 2, 50, 30, 30, 30, 63, 63, 63, 63, 80, 80, 80, 80, 80, 125, 125, 125, 125, 150, 150, 150, 150, 140, 140, 140, 140, 140, 223, 223, 223, 223, 250, 250, 250, 250, 180, 180, 180, 180, 180, 175, 175, 175, 175, 100, 100, 100, 100, 10, 10, 10, 10, 10, 10], [1, 2023, 'prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '2CO', 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2023, 'prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '3I', 0, 0, 38, 128, 248, 218, 245, 212, 269, 206, 306, 256, 326, 276, 196, 221, 246, 301, 206, 56, 86, 296, 206, 216, 376, 416, 276, 196, 273, 440, 517, 354, 524, 274, 474, 374, 374, 434, 374, 284, 104, 229, 204, 209, 124, 324, 254, 154, 114, 134, 124, 114, 104, 94], [3, 2023, 'prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '4P', 0, 90, 120, 150, 0, 90, 30, 120, 0, 180, 30, 150, 30, 0, 150, 150, 180, 30, 0, 180, 360, 60, 150, 300, 180, 0, 60, 300, 390, 300, 60, 420, 0, 450, 150, 180, 240, 120, 90, 0, 300, 150, 180, 90, 300, 30, 0, 60, 30, 0, 0, 0, 0, 0], [4, 2023, 'prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '5IP', 0, -2, 38, 128, 248, 218, 245, 212, 269, 206, 306, 256, 326, 276, 196, 221, 246, 301, 206, 56, 86, 296, 206, 216, 376, 416, 276, 196, 273, 440, 517, 354, 524, 274, 474, 374, 374, 434, 374, 284, 104, 229, 204, 209, 124, 324, 254, 154, 114, 134, 124, 114, 104, 94]]
# *******************************************************::

# 2. mainに戻って、頭の二つ、indexとyearをsliceしてPSI_dataを生成
# *******************************************************::
PSI_data [['prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '1S', 2, 50, 30, 30, 30, 63, 63, 63, 63, 80, 80, 80, 80, 80, 125, 125, 125, 125, 150, 150, 150, 150, 140, 140, 140, 140, 140, 223, 223, 223, 223, 250, 250, 250, 250, 180, 180, 180, 180, 180, 175, 175, 175, 175, 100, 100, 100, 100, 10, 10, 10, 10, 10, 10], ['prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '2CO', 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ['prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '3I', 0, 0, 38, 128, 248, 218, 245, 212, 269, 206, 306, 256, 326, 276, 196, 221, 246, 301, 206, 56, 86, 296, 206, 216, 376, 416, 276, 196, 273, 440, 517, 354, 524, 274, 474, 374, 374, 434, 374, 284, 104, 229, 204, 209, 124, 324, 254, 154, 114, 134, 124, 114, 104, 94], ['prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '4P', 0, 90, 120, 150, 0, 90, 30, 120, 0, 180, 30, 150, 30, 0, 150, 150, 180, 30, 0, 180, 360, 60, 150, 300, 180, 0, 60, 300, 390, 300, 60, 420, 0, 450, 150, 180, 240, 120, 90, 0, 300, 150, 180, 90, 300, 30, 0, 60, 30, 0, 0, 0, 0, 0], ['prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '5IP', 0, -2, 38, 128, 248, 218, 245, 212, 269, 206, 306, 256, 326, 276, 196, 221, 246, 301, 206, 56, 86, 296, 206, 216, 376, 416, 276, 196, 273, 440, 517, 354, 524, 274, 474, 374, 374, 434, 374, 284, 104, 229, 204, 209, 124, 324, 254, 154, 114, 134, 124, 114, 104, 94]]
# *******************************************************::

# 3.クラス生成の初期処理     i_PlanSpace = PlanSpace( plan_prof, PSI_data )
#  S-CO-I-P-IPを初期設定する
## *********************************************
            if      l[4]     == "1S":
                self.S_year  =  l[5:]

            elif    l[4]     == "2CO":
                self.CO_year =  l[5:]

            elif    l[4]     == "3I":
                self.I_year  =  l[5:]

            elif    l[4]     == "4P":
                self.P_year  =  l[5:]

            elif    l[4]     == "5IP":
                self.IP_year =  l[5:]

# *********************************************




# nodeはSCM tree のchild_nodeを指定

def set_leaf_PSI_DB( year, node ):

# nodeはSCM tree のchild_nodeを指定

    print('set_leaf_PSI_DB( year, node )', year , node )

    # PSI_DB名を宣言
    filename = "PSI_DB.csv" 

    print('profile filename',filename)

    # 'node_to'&'year'でPSI_DBを検索

    df      = pd.read_csv( filename, header=0, index_col=None )

    print('df read PSI_DB', df)

    df_psi = df[ (df['year'] == year) & (df['node_to'] == node) ]

    print('df_psi',df_psi)

    PSI_DB_data = [] #return用にリスト型を宣言

    PSI_DB_data = df_psi.values.tolist()

    #PSI_DB_data = df_psi.reset_index().values.tolist()

    #PSI_DB_data = read_PSI_data_csv( PSI_data_file_name )



    print('PSI_DB_data',PSI_DB_data) # LEAFの時、Sが入ってくる




    return PSI_DB_data



# OUTPTUT process
# 0. 生成されたfin_lot_space_Yを使って、書き出す
#        output_Y(year, node,  i_PlanSpace,i_LotSpace,  fin_lot_space_Y)

# ********************************************************
# output 複数年用
# ********************************************************
def output_Y(year, node,  i_PlanSpace,i_LotSpace,  fin_lot_space_Y):
    print('')
    print('node@output', year, node )
    print('')

    PSI_DB_data_file_name = "PSI_DB.csv" 

    print('PSI_DB_data_file_name@output',PSI_DB_data_file_name)

    write_PSI_DB_data2csv( year, node, i_PlanSpace, PSI_DB_data_file_name )

# write_PSI_DB_data2csv( year, node, i_PlanSpace, PSI_DB_data_file_name )

# 1. year+nodeで検索したPSI_DBのindexを求める。
    psi_index = df_psi.query("year == @year & node_to == @node").index.tolist()

# 2. 計算結果のクラス内のPSIをS-CO-I-P-IPでリスト化する。


# 3. S-CO-I-P-IPの各indexに対応するPSI_DB、更新をかける

# ********************************************************
Name: 0, Length: 61, dtype: object
df_psi_l [0, 2023, 'prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '1S', 2, 50, 30, 30, 30, 63, 63, 63, 63, 80, 80, 80, 80, 80, 125, 125, 125, 125, 150, 150, 150, 150, 140, 140, 140, 140, 140, 223, 223, 223, 223, 250, 250, 250, 250, 180, 180, 180, 180, 180, 175, 175, 175, 175, 100, 100, 100, 100, 10, 10, 10, 10, 10, 10] 61
i, l[i] 0 [2023, 'prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '1S', 2, 50, 30, 30, 30, 63, 63, 63, 63, 80, 80, 80, 80, 80, 125, 125, 125, 125, 150, 150, 150, 150, 140, 140, 140, 140, 140, 223, 223, 223, 223, 250, 250, 250, 250, 180, 180, 180, 180, 180, 175, 175, 175, 175, 100, 100, 100, 100, 10, 10, 10, 10, 10, 10] 60
    df_psi.loc[ind] = l[i] # PDI_DBの行数index指定でリストを代入
  File "C:\Users\ohsug\anaconda3\lib\site-packages\pandas\core\indexing.py", line 723, in __setitem__
    iloc._setitem_with_indexer(indexer, value, self.name)
  File "C:\Users\ohsug\anaconda3\lib\site-packages\pandas\core\indexing.py", line 1730, in _setitem_with_indexer
    self._setitem_with_indexer_split_path(indexer, value, name)
  File "C:\Users\ohsug\anaconda3\lib\site-packages\pandas\core\indexing.py", line 1808, in _setitem_with_indexer_split_path
    raise ValueError(
ValueError: Must have equal len keys and value when setting with an iterable


# ********************************************************
Name: 0, Length: 61, dtype: object
df_psi_l [0, 2023, 'prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '1S', 2, 50, 30, 30, 30, 63, 63, 63, 63, 80, 80, 80, 80, 80, 125, 125, 125, 125, 150, 150, 150, 150, 140, 140, 140, 140, 140, 223, 223, 223, 223, 250, 250, 250, 250, 180, 180, 180, 180, 180, 175, 175, 175, 175, 100, 100, 100, 100, 10, 10, 10, 10, 10, 10] 61
i, l[i] 0 [2023, 'prod56789012345', 'sc010', 'YTO', 'YTOLEAF', '1S', 2, 50, 30, 30, 30, 63, 63, 63, 63, 80, 80, 80, 80, 80, 125, 125, 125, 125, 150, 150, 150, 150, 140, 140, 140, 140, 140, 223, 223, 223, 223, 250, 250, 250, 250, 180, 180, 180, 180, 180, 175, 175, 175, 175, 100, 100, 100, 100, 10, 10, 10, 10, 10, 10] 60

